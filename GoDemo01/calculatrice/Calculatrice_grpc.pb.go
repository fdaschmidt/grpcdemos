// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package calculatrice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CalculatorServiceClient is the client API for CalculatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculatorServiceClient interface {
	AddOperation(ctx context.Context, in *ValuesCalculatorRequest, opts ...grpc.CallOption) (*ResultCalculatorResponse, error)
	SubOperation(ctx context.Context, in *ValuesCalculatorRequest, opts ...grpc.CallOption) (*ResultCalculatorResponse, error)
	TableOperation(ctx context.Context, in *TableCalculatorRequest, opts ...grpc.CallOption) (*TableCalculatorResponse, error)
}

type calculatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorServiceClient(cc grpc.ClientConnInterface) CalculatorServiceClient {
	return &calculatorServiceClient{cc}
}

func (c *calculatorServiceClient) AddOperation(ctx context.Context, in *ValuesCalculatorRequest, opts ...grpc.CallOption) (*ResultCalculatorResponse, error) {
	out := new(ResultCalculatorResponse)
	err := c.cc.Invoke(ctx, "/Calculator.CalculatorService/AddOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorServiceClient) SubOperation(ctx context.Context, in *ValuesCalculatorRequest, opts ...grpc.CallOption) (*ResultCalculatorResponse, error) {
	out := new(ResultCalculatorResponse)
	err := c.cc.Invoke(ctx, "/Calculator.CalculatorService/SubOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorServiceClient) TableOperation(ctx context.Context, in *TableCalculatorRequest, opts ...grpc.CallOption) (*TableCalculatorResponse, error) {
	out := new(TableCalculatorResponse)
	err := c.cc.Invoke(ctx, "/Calculator.CalculatorService/TableOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculatorServiceServer is the server API for CalculatorService service.
// All implementations must embed UnimplementedCalculatorServiceServer
// for forward compatibility
type CalculatorServiceServer interface {
	AddOperation(context.Context, *ValuesCalculatorRequest) (*ResultCalculatorResponse, error)
	SubOperation(context.Context, *ValuesCalculatorRequest) (*ResultCalculatorResponse, error)
	TableOperation(context.Context, *TableCalculatorRequest) (*TableCalculatorResponse, error)
	mustEmbedUnimplementedCalculatorServiceServer()
}

// UnimplementedCalculatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalculatorServiceServer struct {
}

func (*UnimplementedCalculatorServiceServer) AddOperation(context.Context, *ValuesCalculatorRequest) (*ResultCalculatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOperation not implemented")
}
func (*UnimplementedCalculatorServiceServer) SubOperation(context.Context, *ValuesCalculatorRequest) (*ResultCalculatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubOperation not implemented")
}
func (*UnimplementedCalculatorServiceServer) TableOperation(context.Context, *TableCalculatorRequest) (*TableCalculatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableOperation not implemented")
}
func (*UnimplementedCalculatorServiceServer) mustEmbedUnimplementedCalculatorServiceServer() {}

func RegisterCalculatorServiceServer(s *grpc.Server, srv CalculatorServiceServer) {
	s.RegisterService(&_CalculatorService_serviceDesc, srv)
}

func _CalculatorService_AddOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValuesCalculatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServiceServer).AddOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calculator.CalculatorService/AddOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServiceServer).AddOperation(ctx, req.(*ValuesCalculatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculatorService_SubOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValuesCalculatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServiceServer).SubOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calculator.CalculatorService/SubOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServiceServer).SubOperation(ctx, req.(*ValuesCalculatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculatorService_TableOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableCalculatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServiceServer).TableOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calculator.CalculatorService/TableOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServiceServer).TableOperation(ctx, req.(*TableCalculatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CalculatorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Calculator.CalculatorService",
	HandlerType: (*CalculatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOperation",
			Handler:    _CalculatorService_AddOperation_Handler,
		},
		{
			MethodName: "SubOperation",
			Handler:    _CalculatorService_SubOperation_Handler,
		},
		{
			MethodName: "TableOperation",
			Handler:    _CalculatorService_TableOperation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Calculatrice.proto",
}
